import scapy.all as scapy
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Constants
INTERFACE = "eth0"  # Replace with your network interface

def sniff_packets(interface):
    try:
        logger.info(f"[*] Sniffing packets on interface {interface}")
        scapy.sniff(iface=interface, store=False, prn=process_packet)
    except KeyboardInterrupt:
        logger.info("[*] Packet sniffing stopped by user.")

def process_packet(packet):
    if packet.haslayer(scapy.IP):
        ip_src, ip_dst, protocol = extract_packet_info(packet)

        logger.info(f"[*] Detected {protocol} packet from {ip_src} to {ip_dst}")

        if packet.haslayer(scapy.Raw):
            check_for_credentials(packet)

def extract_packet_info(packet):
    ip_src = packet[scapy.IP].src
    ip_dst = packet[scapy.IP].dst
    protocol = packet[scapy.IP].proto
    return ip_src, ip_dst, protocol

def check_for_credentials(packet):
    payload = packet[scapy.Raw].load.lower()
    sensitive_keywords = ["username", "password"]

    if any(keyword in payload for keyword in sensitive_keywords):
        logger.warning(f"[!] Possible credentials leaked: {payload}")

if __name__ == "__main__":
    # Check if the specified network interface exists
    if INTERFACE not in scapy.get_if_list():
        logger.error(f"Interface {INTERFACE} not found. Exiting.")
    else:
        sniff_packets(INTERFACE)
